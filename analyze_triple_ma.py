#!/usr/bin/env python3
"""
Analysis tool for debug data generated by the TripleMASlope strategy.
This script helps analyze slope behavior, crossover signals, and equivocal market conditions.
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import argparse
from glob import glob
import seaborn as sns

def analyze_debug_file(filepath):
    """Analyze a single debug CSV file and display key metrics."""
    try:
        df = pd.read_csv(filepath)
        
        # Convert date column to datetime if present
        if 'Date' in df.columns:
            df['Date'] = pd.to_datetime(df['Date'])
            df.set_index('Date', inplace=True)
        
        print(f"\nAnalyzing file: {os.path.basename(filepath)}")
        print(f"Data spans from {df.index[0]} to {df.index[-1]}")
        
        # Signal statistics
        buy_signals = df[df['Signal'] == 1]
        sell_signals = df[df['Signal'] == -1]
        equivocal_periods = df[df['Equivocal'] == True]
        
        print(f"Total periods: {len(df)}")
        print(f"Buy signals: {len(buy_signals)} ({len(buy_signals)/len(df)*100:.2f}%)")
        print(f"Sell signals: {len(sell_signals)} ({len(sell_signals)/len(df)*100:.2f}%)")
        print(f"Equivocal periods: {len(equivocal_periods)} ({len(equivocal_periods)/len(df)*100:.2f}%)")
        
        # Slope analysis
        print("\nSlope Analysis:")
        print(f"Average 6MA slope: {df['Slope_fast'].mean():.6f}")
        print(f"Average 10MA slope: {df['Slope_mid'].mean():.6f}")
        print(f"Average 20MA slope: {df['Slope_slow'].mean():.6f}")
        
        # Buy signal analysis
        if not buy_signals.empty:
            print("\nBuy Signal Analysis:")
            print(f"Average 10MA slope at buy signal: {buy_signals['Slope_mid'].mean():.6f}")
            print(f"Min 10MA slope at buy signal: {buy_signals['Slope_mid'].min():.6f}")
            print(f"Max 10MA slope at buy signal: {buy_signals['Slope_mid'].max():.6f}")
        
        # Sell signal analysis
        if not sell_signals.empty:
            print("\nSell Signal Analysis:")
            print(f"Average 6MA slope at sell signal: {sell_signals['Slope_fast'].mean():.6f}")
            print(f"Min 6MA slope at sell signal: {sell_signals['Slope_fast'].min():.6f}")
            print(f"Max 6MA slope at sell signal: {sell_signals['Slope_fast'].max():.6f}")
            
        return df
    except Exception as e:
        print(f"Error analyzing {filepath}: {e}")
        return None

def plot_slope_distribution(df, output_dir=None):
    """Plot the distribution of slopes for each moving average."""
    try:
        plt.figure(figsize=(12, 6))
        
        # Plot histograms of slopes
        sns.histplot(df['Slope_fast'], alpha=0.5, label='6MA Slope', kde=True)
        sns.histplot(df['Slope_mid'], alpha=0.5, label='10MA Slope', kde=True)
        sns.histplot(df['Slope_slow'], alpha=0.5, label='20MA Slope', kde=True)
        
        plt.axvline(x=0, color='black', linestyle='--', alpha=0.7)
        plt.title('Distribution of Moving Average Slopes')
        plt.xlabel('Slope Value')
        plt.ylabel('Frequency')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        if output_dir:
            plt.savefig(f"{output_dir}/slope_distribution.png")
            print(f"Saved slope distribution plot to {output_dir}/slope_distribution.png")
        else:
            plt.show()
            
        plt.close()
    except Exception as e:
        print(f"Error plotting slope distribution: {e}")

def plot_slope_vs_price(df, output_dir=None):
    """Plot the relationship between slopes and price changes."""
    try:
        # Calculate price changes
        df['Price_Change'] = df['Close'].pct_change() * 100  # as percentage
        
        # Create a figure with 3 subplots
        fig, axes = plt.subplots(3, 1, figsize=(12, 12), sharex=True)
        
        # Plot 6MA slope vs price change
        axes[0].scatter(df['Slope_fast'], df['Price_Change'], alpha=0.5, color='blue')
        axes[0].set_title('6MA Slope vs Price Change')
        axes[0].set_ylabel('Price Change (%)')
        axes[0].grid(True, alpha=0.3)
        
        # Plot 10MA slope vs price change
        axes[1].scatter(df['Slope_mid'], df['Price_Change'], alpha=0.5, color='green')
        axes[1].set_title('10MA Slope vs Price Change')
        axes[1].set_ylabel('Price Change (%)')
        axes[1].grid(True, alpha=0.3)
        
        # Plot 20MA slope vs price change
        axes[2].scatter(df['Slope_slow'], df['Price_Change'], alpha=0.5, color='red')
        axes[2].set_title('20MA Slope vs Price Change')
        axes[2].set_xlabel('Slope Value')
        axes[2].set_ylabel('Price Change (%)')
        axes[2].grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        if output_dir:
            plt.savefig(f"{output_dir}/slope_vs_price.png")
            print(f"Saved slope vs price plot to {output_dir}/slope_vs_price.png")
        else:
            plt.show()
            
        plt.close()
    except Exception as e:
        print(f"Error plotting slope vs price: {e}")

def analyze_trade_file(filepath):
    """Analyze a trades file to assess strategy performance."""
    try:
        trades_df = pd.read_csv(filepath)
        
        # Convert date column to datetime if present
        if 'Date' in trades_df.columns:
            trades_df['Date'] = pd.to_datetime(trades_df['Date'])
            trades_df.set_index('Date', inplace=True)
        
        print(f"\nAnalyzing trades file: {os.path.basename(filepath)}")
        print(f"Total trades: {len(trades_df)}")
        
        # Count buy and sell signals
        buy_count = len(trades_df[trades_df['Signal_Type'] == 'BUY'])
        sell_count = len(trades_df[trades_df['Signal_Type'] == 'SELL'])
        print(f"Buy signals: {buy_count}")
        print(f"Sell signals: {sell_count}")
        
        # Analyze buy signals
        buys = trades_df[trades_df['Signal_Type'] == 'BUY']
        if not buys.empty:
            print("\nBuy Signal Metrics:")
            print(f"Average 10MA-20MA difference: {buys['Slope_Mid_Slow_Diff'].mean():.6f}")
            
        # Analyze sell signals
        sells = trades_df[trades_df['Signal_Type'] == 'SELL']
        if not sells.empty:
            print("\nSell Signal Metrics:")
            print(f"Average 6MA-10MA difference: {sells['Slope_Fast_Mid_Diff'].mean():.6f}")
        
        return trades_df
    except Exception as e:
        print(f"Error analyzing trades file {filepath}: {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description='Analyze TripleMASlope strategy debug data')
    
    parser.add_argument('--debug-dir', type=str, default='debug', 
                        help='Directory containing debug files (default: debug)')
    parser.add_argument('--file', type=str, help='Specific debug file to analyze')
    parser.add_argument('--trades-file', type=str, help='Specific trades file to analyze')
    parser.add_argument('--all', action='store_true', help='Analyze all debug files')
    parser.add_argument('--latest', action='store_true', help='Analyze the latest debug file')
    parser.add_argument('--plots', action='store_true', help='Generate analysis plots')
    
    args = parser.parse_args()
    
    # Check if debug directory exists
    if not os.path.exists(args.debug_dir):
        print(f"Error: Debug directory {args.debug_dir} does not exist")
        return
    
    # Set up debug CSV directory path
    debug_csv_dir = f"{args.debug_dir}/csv"
    if not os.path.exists(debug_csv_dir):
        print(f"Error: CSV directory {debug_csv_dir} does not exist")
        return
    
    # Analyze a specific file if provided
    if args.file:
        filepath = args.file
        if not os.path.exists(filepath):
            filepath = f"{debug_csv_dir}/{args.file}"
            if not os.path.exists(filepath):
                print(f"Error: File {args.file} does not exist")
                return
        
        df = analyze_debug_file(filepath)
        
        if args.plots and df is not None:
            plot_slope_distribution(df, args.debug_dir)
            plot_slope_vs_price(df, args.debug_dir)
    
    # Analyze a specific trades file if provided
    elif args.trades_file:
        filepath = args.trades_file
        if not os.path.exists(filepath):
            filepath = f"{debug_csv_dir}/{args.trades_file}"
            if not os.path.exists(filepath):
                print(f"Error: Trades file {args.trades_file} does not exist")
                return
        
        analyze_trade_file(filepath)
    
    # Analyze the latest debug file
    elif args.latest:
        debug_files = glob(f"{debug_csv_dir}/triple_ma_debug_*.csv")
        trade_files = glob(f"{debug_csv_dir}/triple_ma_trades_*.csv")
        
        if debug_files:
            latest_debug = max(debug_files, key=os.path.getctime)
            df = analyze_debug_file(latest_debug)
            
            if args.plots and df is not None:
                plot_slope_distribution(df, args.debug_dir)
                plot_slope_vs_price(df, args.debug_dir)
        else:
            print("No debug files found")
        
        if trade_files:
            latest_trades = max(trade_files, key=os.path.getctime)
            analyze_trade_file(latest_trades)
        else:
            print("No trade files found")
    
    # Analyze all debug files
    elif args.all:
        debug_files = glob(f"{debug_csv_dir}/triple_ma_debug_*.csv")
        trade_files = glob(f"{debug_csv_dir}/triple_ma_trades_*.csv")
        
        if not debug_files:
            print("No debug files found")
        else:
            for file in debug_files:
                analyze_debug_file(file)
        
        if not trade_files:
            print("No trade files found")
        else:
            for file in trade_files:
                analyze_trade_file(file)
    
    else:
        print("No analysis option specified. Use --help to see available options.")

if __name__ == "__main__":
    main() 